/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	uint32_t *rcc_ahb1enr = (uint32_t *) 0x40023830; // rcc enable for AHB1 bus
	uint32_t *gpio_d_register = (uint32_t *) 0x40020C00; // address for GPIO D register

	*rcc_ahb1enr |= (0x1 << 3); // enable clock for GPIO port D (bit 3)

	// PD12: Green LED
	// PD13: Orange LED
	// PD14: Red LED
	// PD15: Blue LED

	*gpio_d_register &= ~(0xFF << 24); // reset mode for PD12 - PD15
	*gpio_d_register |= (0x55 << 24); // set PD12 - PD15 as g/p output

	uint32_t *gpio_d_output = (uint32_t *) 0x40020C14; // GPIO port D input address (GPIO_D_REGISTER + 0x14 offset)

	//reset bits for PD12 - PD15
	*gpio_d_output &= ~(0xF << 12);

	unint16_t LED_CNT = 4;
	uint32_t LEDS[] = {0x1 << 12, 0x1 << 13, 0x1 << 14, 0x1 << 15};

	uint32_t ledIndex = 0;

	while (1) {

		for(uint16_t ii = 0; ii < LED_CNT; ii++) {
			*gpio_d_output &= ~(LEDS[ii]); //for each LED bit, reset
		}
		*gpio_d_output |= LEDS[ledIndex]; //set bit for current LED at ledIndex
		for(uint16_t ii = 0; ii < 50000; ii++) {} //artificial delay


		if(ledIndex >= LED_CNT) {
			ledIndex = 0; // reset ledIndex to 0 and loop
		}

	}

}
