/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	uint32_t *rcc_ahb1enr = (uint32_t *) 0x40023830; // rcc enable for AHB1 bus
	uint32_t *gpio_d_register = (uint32_t *) 0x40020C00; // address for GPIO D register (0x4002 0C00 - 0x4002 0FFF)
	uint32_t *gpio_a_register = (uint32_t *) 0x40020000; // address of GPIO A register (0x4002 0000 - 0x4002 03FF)

	*rcc_ahb1enr |= 0x1; // enable clock for GPIO port A
	*rcc_ahb1enr |= (0x1 << 3); // enable clock for GPIO port D (bit 3)

	// PA0: B1 USER pushbutton
	// PD12: Green LED
	// PD13: Orange LED
	// PD14: Red LED
	// PD15: Blue LED

	*gpio_a_register &= ~(0x3); // reset mode for GPIO A
	// no need to set register mode for INPUT as 00 is input

	*gpio_d_register &= ~(0xFF << 24); // reset mode for PD12 - PD15
	*gpio_d_register |= (0x55 << 24); // set PD12 - PD15 as g/p output

	uint32_t *gpio_d_output = (uint32_t *) 0x40020C14; // GPIO port D input address (GPIO_D_REGISTER + 0x14 offset)
	uint32_t *gpio_a_input = (uint32_t *) 0x40020010; // gpio_a_register + 0x10 offset)

	//reset bits for PD12 - PD15
	*gpio_d_output &= ~(0xF << 12);

	uint16_t LED_CNT = 4;
	uint32_t LEDS[] = {0x1 << 12, 0x1 << 13, 0x1 << 14, 0x1 << 15};

	uint16_t ledIndex = 0;
	uint16_t ledSpeedMultiplier = 1;
	uint16_t ledSpeed = 50000;

	uint32_t speedMultiplierPreviousState = 0x0;

	while (1) {

		if(*gpio_a_input & 0x1) {
			speedMultiplierPreviousState = 0x1;
		} else if(speedMultiplierPreviousState == 0x1) {
			ledSpeedMultiplier++; //increase speed multiplier by 1
			if(ledSpeedMultiplier > 5) {
				ledSpeedMultiplier = 1; //reset after multiplier reaches 5
			}
			speedMultiplierPreviousState = 0x0;
		} else {
			speedMultiplierPreviousState = 0x0;
		}

		for(uint16_t ii = 0; ii < LED_CNT; ii++) {
			*gpio_d_output &= ~(LEDS[ii]); //for each LED bit, reset
		}
		*gpio_d_output |= LEDS[ledIndex]; //set bit for current LED at ledIndex
		for(uint16_t ii = 0; ii < (ledSpeedMultiplier * ledSpeed); ii++) {} //artificial delay

		ledIndex++;
		if(ledIndex >= LED_CNT) {
			ledIndex = 0; // reset ledIndex to 0 and loop
		}
	}
}
